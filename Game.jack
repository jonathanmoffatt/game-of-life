class Game {
    field Lifecycle lifecycle;
    field Editor editor;
    field int x, y;
    static int MENU_NONE, MENU_MAIN, MENU_EXAMPLES, MENU_STILL_LIFES, MENU_OSCILLATORS, MENU_SPACESHIPS, MENU_NEW_GAME, MENU_RUNNING;
    static int SPEED_SLOW, SPEED_FAST;
    static char KEY_NONE, KEY_SPACE, KEY_LEFT, KEY_RIGHT, KEY_UP, KEY_DOWN;
    static char KEY_E, KEY_G, KEY_H, KEY_L, KEY_M, KEY_N, KEY_O, KEY_P, KEY_Q, KEY_R, KEY_S;

    constructor Game new() {
        let x = 0;
        let y = 0;
        return this;
    }
    
    function void init() {
        let MENU_MAIN = 1;
        let MENU_EXAMPLES = 2;
        let MENU_STILL_LIFES = 3;
        let MENU_OSCILLATORS = 4;
        let MENU_SPACESHIPS = 5;
        let MENU_NEW_GAME = 6;
        let MENU_RUNNING = 7;
        let SPEED_SLOW = 650;
        let SPEED_FAST = 300;
        let KEY_SPACE = 32;
        let KEY_LEFT = 130;
        let KEY_UP = 131;
        let KEY_RIGHT = 132;
        let KEY_DOWN = 133;
        let KEY_E = 69;
        let KEY_G = 71;
        let KEY_H = 72;
        let KEY_L = 76;
        let KEY_M = 77;
        let KEY_N = 78;
        let KEY_O = 79;
        let KEY_P = 80;
        let KEY_Q = 81;
        let KEY_R = 82;
        let KEY_S = 83;
        return;
    }

    method void run() {
        var char key;
        var boolean quit, running, arrow, canBeRunning;
        var int menu, speed;

        let lifecycle = Lifecycle.new();
        let editor = Editor.new(lifecycle);
        let quit = false;
        let running = false;
        let menu = MENU_MAIN;
        let speed = SPEED_SLOW;
        do Menu.showMainMenu();

        while (~quit) {
            let key = Keyboard.keyPressed();
            let arrow = (key = KEY_UP) | (key = KEY_DOWN) | (key = KEY_LEFT) | (key = KEY_RIGHT);
            let canBeRunning = (menu = MENU_STILL_LIFES) | (menu = MENU_SPACESHIPS) | (menu = MENU_OSCILLATORS) | (menu = MENU_RUNNING);

            if (menu = MENU_MAIN) {
                // new game
                if (key = KEY_N) {
                    let menu = MENU_NEW_GAME;
                    do Menu.showNewGameMenu();
                    do lifecycle.clear();
                    do editor.startEditing();
                }
                // examples
                if (key = KEY_E) { 
                    let menu = MENU_EXAMPLES; 
                    do Menu.showExamplesMenu();
                }
            }

            if (menu = MENU_NEW_GAME) {
                if (key = KEY_LEFT) { do editor.moveLeft(); }
                if (key = KEY_RIGHT) { do editor.moveRight(); }
                if (key = KEY_UP) { do editor.moveUp(); }
                if (key = KEY_DOWN) { do editor.moveDown(); }
                if (key = KEY_SPACE) { do editor.toggleCell(); }
                if (key = KEY_R) {
                    let menu = MENU_RUNNING;
                    do editor.stopEditing();
                    do lifecycle.save();
                    do Menu.showRunningMenu();
                    let running = true;
                }
            }

            if (menu = MENU_RUNNING) {
                if (key = KEY_R) {
                    do lifecycle.restore();
                }
            }

            if (menu = MENU_EXAMPLES) {
                // still lifes
                if (key = KEY_L) {
                    let menu = MENU_STILL_LIFES;
                    do Menu.showStillLifesMenu();
                    do Examples.buildStillLifes(lifecycle, 9);
                    let running = true;
                } 

                // oscillators
                if (key = KEY_O) {
                    let menu = MENU_OSCILLATORS;
                    do Menu.showOscillatorsMenu();
                    do Examples.buildOscillators(lifecycle);
                    let speed = SPEED_SLOW;
                    let running = true;
                }

                // spaceships
                if (key = KEY_S) {
                    let menu = MENU_SPACESHIPS;
                    let speed = SPEED_FAST;
                    do Menu.showSpaceshipsMenu();
                }
            }

            if (menu = MENU_SPACESHIPS) {
                if (key = KEY_G) {
                    do Examples.addGlider(lifecycle);
                    let running = true;
                }
                if (key = KEY_L) {
                    do Examples.addLightWeightSpaceship(lifecycle);
                    let running = true;
                }
                if (key = KEY_M) {
                    do Examples.addMiddleWeightSpaceship(lifecycle);
                    let running = true;
                }
                if (key = KEY_H) {
                    do Examples.addHeavyWeightSpaceship(lifecycle);
                    let running = true;
                }
            }

            // pause or unpause
            if ((key = KEY_P) & canBeRunning) {
                let running = ~running;
            }

            // quit or move back to previous menu
            if (key = KEY_Q) {
                if (menu = MENU_MAIN) { 
                    do Menu.showFarewellMessage();
                    let quit = true; 
                } 
                if ((menu = MENU_EXAMPLES) | (menu = MENU_NEW_GAME)) { 
                    let menu = MENU_MAIN; 
                    do lifecycle.clear();
                    do Menu.showMainMenu();
                }
                if (menu = MENU_RUNNING) {
                    let menu = MENU_NEW_GAME;
                    do Menu.showNewGameMenu();
                    do lifecycle.restore();
                    do draw();
                    do editor.startEditing();
                }
                if ((menu = MENU_STILL_LIFES) | (menu = MENU_OSCILLATORS) | (menu = MENU_SPACESHIPS)) { 
                    let menu = MENU_EXAMPLES; 
                    do Menu.showExamplesMenu();
                    do lifecycle.clear();
                }
                let running = false;
            }
            if (~(key = KEY_NONE) & ~arrow) { do KeyboardHelper.waitForKeyReleased(key); }
            if (arrow) { do Sys.wait(150); }

            if (running) {
                do draw();
                do lifecycle.tick();
                do KeyboardHelper.waitForTimePeriodOrKeyPress(speed);
            }
        }

        return;
    }

    method void draw() {
        do Grid.fillFromArray(lifecycle.getCurrentIteration());
        return;
    }

    method void dispose() {
        do lifecycle.dispose();
        do Memory.deAlloc(this);
        return;
    }

}