class Game {
    field Array currentIteration, nextIteration;

    constructor Game new() {
        return this;
    }

    method void dispose() {
        do ArrayHelper.cleanUp(currentIteration);
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var char key;
        var boolean quit, refresh;
        var int menu, currentMenu;

        let currentIteration = ArrayHelper.getEmptyGrid();
        let menu = 1;
        let currentMenu = 0;

        let quit = false;
        while (~quit) {
            let refresh = ~(menu = currentMenu);
            if ((menu = 1) & refresh) { do Menu.showMainMenu(); }
            if ((menu = 2) & refresh) { do Menu.showExamplesMenu(); }
            let currentMenu = menu;
            let key = Game.waitForKeyPressed();
            // E key
            if ((key = 69) & (menu = 1)) { let menu = 2; }
            // L key
            if ((key = 76) & (menu = 2)) {
                do Examples.buildStillLifes(currentIteration, 12);
                do Grid.fillFromArray(currentIteration);
            } 
            // Q key
            if (key = 81) {
                if (menu = 1) { let quit = true; } 
                else { let menu = 1; }
            }
            do Game.waitForKeyReleased(key);
        }

        do Menu.showFarewellMessage();
        return;
    }

    function char waitForKeyPressed() {
        var char key;
        let key = 0;
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }
        return key;
    }

    function void waitForKeyReleased(char key) {
        while (~(key = 0)) {
            let key = Keyboard.keyPressed();
        }
        return;
    }
}