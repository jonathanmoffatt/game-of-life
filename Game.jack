class Game {
    field Lifecycle lifecycle;

    constructor Game new() {
        return this;
    }

    method void run() {
        var char key;
        var boolean quit, refresh, running;
        var int menu, currentMenu;

        let lifecycle = Lifecycle.new();
        let menu = 1;
        let currentMenu = 0;

        let quit = false;
        let running = false;
        while (~quit) {
            let refresh = ~(menu = currentMenu);
            if ((menu = 1) & refresh) { do Menu.showMainMenu(); }
            if ((menu = 2) & refresh) { do Menu.showExamplesMenu(); }
            let currentMenu = menu;
            if (running) {
                let key = Keyboard.keyPressed();
            } else {
                let key = KeyboardHelper.waitForKeyPressed();
            }

            // E key: examples menu
            if ((key = 69) & (menu = 1)) { let menu = 2; }

            // L key: still lifes
            if ((key = 76) & (menu = 2)) {
                do Menu.showStillLifesMenu();
                do Examples.buildStillLifes(lifecycle, 9);
                do Grid.fillFromArray(lifecycle.getCurrentIteration());
                let menu = 3;
            } 

            // O key: oscillators
            if ((key = 79) & (menu = 2)) {
                do Menu.showOscillatorsMenu();
                do Examples.buildOscillators(lifecycle);
                do Grid.fillFromArray(lifecycle.getCurrentIteration());
                let running = true;
                let menu = 4;
            }

            // P key: pause or unpause
            if ((key = 80) & (menu = 4)) {
                let running = ~running;
            }

            // Q key: quit or move back to previous menu
            if (key = 81) {
                if (menu = 1) { let quit = true; } 
                if (menu = 2) { let menu = 1; }
                if (menu = 3) { let menu = 2; }
                if (menu = 4) { let menu = 2; }
                let running = false;
            }
            if (~(key = 0)) {
                do KeyboardHelper.waitForKeyReleased(key);
            }

            if (running) {
                do lifecycle.tick();
                do Grid.fillFromArray(lifecycle.getCurrentIteration());
                do KeyboardHelper.waitForTimePeriodOrKeyPress(650);
            }
        }

        do Menu.showFarewellMessage();
        return;
    }

    method void dispose() {
        do lifecycle.dispose();
        do Memory.deAlloc(this);
        return;
    }

}