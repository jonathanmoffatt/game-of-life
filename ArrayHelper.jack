class ArrayHelper {
    function Array getEmptyGrid() {
        var Array rows, columns;
        var int i;
        let i = 0;
        let rows = ArrayHelper.getEmptyArray();
        while (i < 32) {
            let columns = ArrayHelper.getEmptyArray();
            let rows[i] = columns;
            let i = i + 1;
        }
        return rows;
    }

    function Array getEmptyArray() {
        var Array empty;
        let empty = Array.new(32);
        do ArrayHelper.clearGridRow(empty);
        return empty;
    }

    function void clearGridRow(Array gridRow) {
        var int i;
        let i = 0;
        while (i < 32) {
            let gridRow[i] = false;
            let i = i + 1;
        }
        return;
    }

    function void clearGrid(Array grid) {
        var int row;
        let row = 0;
        while (row < 32) {
            do ArrayHelper.clearGridRow(grid[row]);
            let row = row + 1;
        }
        return;
    }

    function void setArrayCell(Array cells, int x, int y, boolean alive) {
        var Array row;
        let row = cells[y];
        let row[x] = alive;
        return;
    }

    function void setArrayCells(Array cells, int x, int y, int height, Array cellsAsString) {
        var int i, j;
        var String row;
        let i = 0;
        while (i < height) {
            let row = cellsAsString[i];
            let j = 0;
            while (j < row.length()) {
                // a - (char 45) will leave the cell blank, anything else will set it
                do ArrayHelper.setArrayCell(cells, x + j, y + i, ~(row.charAt(j) = 45));
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    function void cleanUp(Array cells) {
        var Array row;
        var int i;
        while (i < 32) {
            let row = cells[i];
            do row.dispose();
            let i = i + 1;
        }
        do cells.dispose();
        return;
    }

}