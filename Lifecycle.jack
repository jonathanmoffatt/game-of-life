class Lifecycle {
    field Array iteration1, iteration2;
    field boolean currentIsIteration1;

    constructor Lifecycle new() {
        let iteration1 = ArrayHelper.getEmptyGrid();
        let iteration2 = ArrayHelper.getEmptyGrid();
        let currentIsIteration1 = true;
        return this;
    }

    method Array getCurrentIteration() {
        if (currentIsIteration1) {
            return iteration1;
        } else {
            return iteration2;
        }
    }

    method Array getPreviousIteration() {
        if (currentIsIteration1) {
            return iteration2;
        } else {
            return iteration1;
        }
    }

    method boolean next() {
        var Array current, next, currentRow, nextRow;
        var int x, y, neighbours;
        var boolean alive, changed;

        let current = getCurrentIteration();
        let next = getPreviousIteration();

        let y = 0;
        while (y < 32) {
            let x = 0;
            while (x < 32) {
                let currentRow = current[y];
                let nextRow = next[y];
                let alive = currentRow[x];
                let neighbours = numberOfNeighbours(x, y);
                if ((neighbours < 2) & alive) {
                    let alive = false;
                    let changed = true;
                } 
                if ((neighbours = 3) & ~alive) {
                    let alive = true;
                    let changed = true;
                }
                let nextRow[x] = alive;
                let x = x + 1;
            }
            let y = y + 1;
        }
        let currentIsIteration1 = ~currentIsIteration1;
        return changed;
    }

    method int numberOfNeighbours(int x, int y) {
        var int xMinusOne, xPlusOne, yMinusOne, yPlusOne, count;
        var Array iteration, row, rowAbove, rowBelow;

        if (x = 0) {
            let xMinusOne = 31;
        } else {
            let xMinusOne = x - 1;
        }
        if (y = 0) {
            let yMinusOne = 31;
        } else {
            let yMinusOne = y - 1;
        }
        if (x = 31) {
            let xPlusOne = 0;
        } else {
            let xPlusOne = x + 1;
        }
        if (y = 31) {
            let yPlusOne = 0;
        } else {
            let yPlusOne = y + 1;
        }

        let iteration = getCurrentIteration();
        let row = iteration[y];
        let rowAbove = iteration[yMinusOne];
        let rowBelow = iteration[yPlusOne];
        let count = 0;
        
        if (rowAbove[xMinusOne]) { let count = count + 1; }
        if (rowAbove[x]) { let count = count + 1; }
        if (rowAbove[xPlusOne]) { let count = count + 1; }
        if (row[xMinusOne]) { let count = count + 1; }
        if (row[xPlusOne]) { let count = count + 1; }
        if (rowBelow[xMinusOne]) { let count = count + 1; }
        if (rowBelow[x]) { let count = count + 1; }
        if (rowBelow[xPlusOne]) { let count = count + 1; }

        return count;
    }

    method void populate(Array iteration) {
        do ArrayHelper.cleanUp(iteration1);
        let iteration1 = iteration;
        return;
    }

    method void clear() {
        do ArrayHelper.clearGrid(iteration1);
        return;
    }

    method void setCells(int x, int y, String cells) {
        do ArrayHelper.setArrayCells(iteration1, x, y, cells);
        return;
    }

    method void dispose() {
        do ArrayHelper.cleanUp(iteration1);
        do ArrayHelper.cleanUp(iteration2);
        do Memory.deAlloc(this);
        return;
    }

}